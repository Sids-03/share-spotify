{"ast":null,"code":"var _jsxFileName = \"/Users/sid/dev/user-playlist/src/components/Login.jsx\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Login() {\n  function generateCodeVerifier(length) {\n    let text = '';\n    let possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    for (let i = 0; i < length; i++) {\n      text += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n    return text;\n  }\n  async function generateCodeChallenge(codeVerifier) {\n    const data = new TextEncoder().encode(codeVerifier);\n    const digest = await window.crypto.subtle.digest('SHA-256', data);\n    return btoa(String.fromCharCode.apply(null, [...new Uint8Array(digest)])).replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=+$/, '');\n  }\n  const handleClick = async () => {\n    const verifier = generateCodeVerifier(128);\n    const challenge = await generateCodeChallenge(verifier);\n    const clientId = '40c8d993d0c1428aa736f76635d80725';\n    const params = new URLSearchParams();\n    params.append(\"client_id\", clientId);\n    params.append(\"response_type\", \"code\");\n    params.append(\"redirect_uri\", \"http://localhost:3000/\");\n    params.append(\"scope\", \"user-read-private user-read-email\");\n    params.append(\"code_challenge_method\", \"S256\");\n    params.append(\"code_challenge\", challenge);\n    document.location = `https://accounts.spotify.com/authorize?${params.toString()}`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: handleClick,\n    children: \"Login\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n}\n_c = Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Login","generateCodeVerifier","length","text","possible","i","charAt","Math","floor","random","generateCodeChallenge","codeVerifier","data","TextEncoder","encode","digest","window","crypto","subtle","btoa","String","fromCharCode","apply","Uint8Array","replace","handleClick","verifier","challenge","clientId","params","URLSearchParams","append","document","location","toString","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/sid/dev/user-playlist/src/components/Login.jsx"],"sourcesContent":["import React from 'react'\n\nexport default function Login() {\n    function generateCodeVerifier(length) {\n        let text = '';\n        let possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    \n        for (let i = 0; i < length; i++) {\n            text += possible.charAt(Math.floor(Math.random() * possible.length));\n        }\n        return text;\n    }\n    \n    async function generateCodeChallenge(codeVerifier) {\n        const data = new TextEncoder().encode(codeVerifier);\n        const digest = await window.crypto.subtle.digest('SHA-256', data);\n        return btoa(String.fromCharCode.apply(null, [...new Uint8Array(digest)]))\n            .replace(/\\+/g, '-')\n            .replace(/\\//g, '_')\n            .replace(/=+$/, '');\n    }\n\n    const handleClick = async() => {\n        const verifier = generateCodeVerifier(128);\n        const challenge = await generateCodeChallenge(verifier);\n        const clientId = '40c8d993d0c1428aa736f76635d80725';\n        const params = new URLSearchParams();\n        params.append(\"client_id\", clientId);\n        params.append(\"response_type\", \"code\");\n        params.append(\"redirect_uri\", \"http://localhost:3000/\");\n        params.append(\"scope\", \"user-read-private user-read-email\");\n        params.append(\"code_challenge_method\", \"S256\");\n        params.append(\"code_challenge\", challenge);\n\n        document.location = `https://accounts.spotify.com/authorize?${params.toString()}`;\n    };\n\n\n    \n    return (\n        <button onClick={handleClick}>Login</button>\n    )\n}\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEzB,eAAe,SAASC,KAAKA,CAAA,EAAG;EAC5B,SAASC,oBAAoBA,CAACC,MAAM,EAAE;IAClC,IAAIC,IAAI,GAAG,EAAE;IACb,IAAIC,QAAQ,GAAG,gEAAgE;IAE/E,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,MAAM,EAAEG,CAAC,EAAE,EAAE;MAC7BF,IAAI,IAAIC,QAAQ,CAACE,MAAM,CAACC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGL,QAAQ,CAACF,MAAM,CAAC,CAAC;IACxE;IACA,OAAOC,IAAI;EACf;EAEA,eAAeO,qBAAqBA,CAACC,YAAY,EAAE;IAC/C,MAAMC,IAAI,GAAG,IAAIC,WAAW,CAAC,CAAC,CAACC,MAAM,CAACH,YAAY,CAAC;IACnD,MAAMI,MAAM,GAAG,MAAMC,MAAM,CAACC,MAAM,CAACC,MAAM,CAACH,MAAM,CAAC,SAAS,EAAEH,IAAI,CAAC;IACjE,OAAOO,IAAI,CAACC,MAAM,CAACC,YAAY,CAACC,KAAK,CAAC,IAAI,EAAE,CAAC,GAAG,IAAIC,UAAU,CAACR,MAAM,CAAC,CAAC,CAAC,CAAC,CACpES,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CACnBA,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CACnBA,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;EAC3B;EAEA,MAAMC,WAAW,GAAG,MAAAA,CAAA,KAAW;IAC3B,MAAMC,QAAQ,GAAGzB,oBAAoB,CAAC,GAAG,CAAC;IAC1C,MAAM0B,SAAS,GAAG,MAAMjB,qBAAqB,CAACgB,QAAQ,CAAC;IACvD,MAAME,QAAQ,GAAG,kCAAkC;IACnD,MAAMC,MAAM,GAAG,IAAIC,eAAe,CAAC,CAAC;IACpCD,MAAM,CAACE,MAAM,CAAC,WAAW,EAAEH,QAAQ,CAAC;IACpCC,MAAM,CAACE,MAAM,CAAC,eAAe,EAAE,MAAM,CAAC;IACtCF,MAAM,CAACE,MAAM,CAAC,cAAc,EAAE,wBAAwB,CAAC;IACvDF,MAAM,CAACE,MAAM,CAAC,OAAO,EAAE,mCAAmC,CAAC;IAC3DF,MAAM,CAACE,MAAM,CAAC,uBAAuB,EAAE,MAAM,CAAC;IAC9CF,MAAM,CAACE,MAAM,CAAC,gBAAgB,EAAEJ,SAAS,CAAC;IAE1CK,QAAQ,CAACC,QAAQ,GAAI,0CAAyCJ,MAAM,CAACK,QAAQ,CAAC,CAAE,EAAC;EACrF,CAAC;EAID,oBACInC,OAAA;IAAQoC,OAAO,EAAEV,WAAY;IAAAW,QAAA,EAAC;EAAK;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAQ,CAAC;AAEpD;AAACC,EAAA,GAxCuBzC,KAAK;AAAA,IAAAyC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}